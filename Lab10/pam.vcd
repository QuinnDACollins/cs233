$date
	Thu Oct 29 18:57:35 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 32 ! out [31:0] $end
$var reg 1 " clk $end
$var reg 1 # done $end
$var reg 1 $ reset $end
$scope module pam $end
$var wire 1 " clk $end
$var wire 1 $ reset $end
$var wire 32 % out [31:0] $end
$var wire 30 & next_index [31:2] $end
$var wire 32 ' next_data [31:0] $end
$var wire 30 ( index [31:2] $end
$var wire 32 ) data [31:0] $end
$scope module Adder $end
$var wire 30 * in2 [29:0] $end
$var wire 30 + out [29:0] $end
$var wire 30 , in1 [29:0] $end
$upscope $end
$scope module Counter $end
$var wire 1 " clk $end
$var wire 30 - d [29:0] $end
$var wire 1 . enable $end
$var wire 1 $ reset $end
$var reg 30 / q [29:0] $end
$upscope $end
$scope module Register $end
$var wire 1 " clk $end
$var wire 1 0 enable $end
$var wire 1 $ reset $end
$var wire 32 1 d [31:0] $end
$var reg 32 2 q [31:0] $end
$upscope $end
$scope module alu $end
$var wire 3 3 control [2:0] $end
$var wire 32 4 inA [31:0] $end
$var wire 32 5 out [31:0] $end
$var wire 1 6 zero $end
$var wire 32 7 inB [31:0] $end
$upscope $end
$scope module rom $end
$var wire 30 8 addr [29:0] $end
$var wire 32 9 data [31:0] $end
$var reg 32 : i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000 :
bx 9
bx 8
bx 7
x6
bx 5
bx 4
b0 3
bx 2
bx 1
10
bx /
1.
bx -
bx ,
bx +
b1 *
bx )
bx (
bx '
bx &
bx %
1$
0#
0"
bx !
$end
#1
b0 (
b0 ,
b0 /
b0 8
b0 !
b0 %
b0 2
b0 4
1"
#2
0"
#3
1"
b1 )
b1 7
b1 9
b1 &
b1 +
b1 -
#4
0"
06
#5
1"
b1 '
b1 1
b1 5
#6
0"
#7
1"
#8
0"
#9
1"
#10
0"
#11
1"
#12
0"
#13
b1 (
b1 ,
b1 /
b1 8
b1 !
b1 %
b1 2
b1 4
1"
0$
#14
16
0"
#15
b10 !
b10 %
b10 2
b10 4
b10 (
b10 ,
b10 /
b10 8
1"
b10 '
b10 1
b10 5
b10 )
b10 7
b10 9
b10 &
b10 +
b10 -
#16
0"
#17
b11 (
b11 ,
b11 /
b11 8
b100 !
b100 %
b100 2
b100 4
1"
b100 )
b100 7
b100 9
b11 &
b11 +
b11 -
b100 '
b100 1
b100 5
#18
0"
#19
b1000 !
b1000 %
b1000 2
b1000 4
b100 (
b100 ,
b100 /
b100 8
1"
b1000 )
b1000 7
b1000 9
b100 &
b100 +
b100 -
b1000 '
b1000 1
b1000 5
#20
0"
#21
b101 (
b101 ,
b101 /
b101 8
b10000 !
b10000 %
b10000 2
b10000 4
1"
b10000 )
b10000 7
b10000 9
b101 &
b101 +
b101 -
b10000 '
b10000 1
b10000 5
#22
0"
#23
b100000 !
b100000 %
b100000 2
b100000 4
b110 (
b110 ,
b110 /
b110 8
1"
b100000 )
b100000 7
b100000 9
b110 &
b110 +
b110 -
b100000 '
b100000 1
b100000 5
#24
0"
#25
b111 (
b111 ,
b111 /
b111 8
b1000000 !
b1000000 %
b1000000 2
b1000000 4
1"
b1000000 )
b1000000 7
b1000000 9
b111 &
b111 +
b111 -
b1000000 '
b1000000 1
b1000000 5
#26
0"
#27
b10000000 !
b10000000 %
b10000000 2
b10000000 4
b1000 (
b1000 ,
b1000 /
b1000 8
1"
b10000000 )
b10000000 7
b10000000 9
b1000 &
b1000 +
b1000 -
b10000000 '
b10000000 1
b10000000 5
#28
0"
#29
b1001 (
b1001 ,
b1001 /
b1001 8
b100000000 !
b100000000 %
b100000000 2
b100000000 4
1"
b0 )
b0 7
b0 9
b1001 &
b1001 +
b1001 -
b100000000 '
b100000000 1
b100000000 5
#30
0"
06
#31
b1010 (
b1010 ,
b1010 /
b1010 8
1"
b1010 &
b1010 +
b1010 -
#32
0"
#33
b1011 (
b1011 ,
b1011 /
b1011 8
1"
b1011 &
b1011 +
b1011 -
#34
0"
#35
b1100 (
b1100 ,
b1100 /
b1100 8
1"
b1100 &
b1100 +
b1100 -
#36
0"
#37
b1101 (
b1101 ,
b1101 /
b1101 8
1"
b1101 &
b1101 +
b1101 -
#38
0"
#39
b1110 (
b1110 ,
b1110 /
b1110 8
1"
b1110 &
b1110 +
b1110 -
#40
0"
#41
b1111 (
b1111 ,
b1111 /
b1111 8
1"
b1111 &
b1111 +
b1111 -
#42
0"
#43
b10000 (
b10000 ,
b10000 /
b10000 8
1"
b10000 &
b10000 +
b10000 -
#44
0"
#45
b10001 (
b10001 ,
b10001 /
b10001 8
1"
b10001 &
b10001 +
b10001 -
#46
0"
#47
b10010 (
b10010 ,
b10010 /
b10010 8
1"
b10010 &
b10010 +
b10010 -
#48
0"
#49
b10011 (
b10011 ,
b10011 /
b10011 8
1"
b10011 &
b10011 +
b10011 -
#50
0"
#51
b10100 (
b10100 ,
b10100 /
b10100 8
1"
b10100 &
b10100 +
b10100 -
#52
0"
#53
b10101 (
b10101 ,
b10101 /
b10101 8
1"
b10101 &
b10101 +
b10101 -
#54
0"
#55
b10110 (
b10110 ,
b10110 /
b10110 8
1"
b10110 &
b10110 +
b10110 -
#56
0"
#57
b10111 (
b10111 ,
b10111 /
b10111 8
1"
b10111 &
b10111 +
b10111 -
#58
0"
#59
b11000 (
b11000 ,
b11000 /
b11000 8
1"
b11000 &
b11000 +
b11000 -
#60
0"
#61
b11001 (
b11001 ,
b11001 /
b11001 8
1"
b11001 &
b11001 +
b11001 -
#62
0"
#63
b11010 (
b11010 ,
b11010 /
b11010 8
1"
b11010 &
b11010 +
b11010 -
1#
