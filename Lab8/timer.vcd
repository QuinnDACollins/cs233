$date
	Sun Oct 18 19:59:30 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module timer_test $end
$var wire 32 ! cycle [31:0] $end
$var wire 1 " TimerInterrupt $end
$var wire 1 # TimerAddress $end
$var reg 1 $ MemRead $end
$var reg 1 % MemWrite $end
$var reg 32 & address [31:0] $end
$var reg 1 ' clock $end
$var reg 32 ( data [31:0] $end
$var reg 1 ) reset $end
$scope module t $end
$var wire 1 * Acknowledge $end
$var wire 1 $ MemRead $end
$var wire 1 % MemWrite $end
$var wire 1 # TimerAddress $end
$var wire 1 + TimerRead $end
$var wire 1 , TimerWrite $end
$var wire 32 - address [31:0] $end
$var wire 1 ' clock $end
$var wire 32 . data [31:0] $end
$var wire 1 / interline_reset $end
$var wire 1 ) reset $end
$var wire 1 0 interline_enable $end
$var wire 32 1 intercy_out [31:0] $end
$var wire 32 2 cycounter_out [31:0] $end
$var wire 32 3 cycle_alu_out [31:0] $end
$var wire 32 4 cycle [31:0] $end
$var wire 1 5 addr_eq2 $end
$var wire 1 6 addr_eq1 $end
$var wire 1 " TimerInterrupt $end
$scope module cycle_alu $end
$var wire 3 7 control [2:0] $end
$var wire 32 8 inB [31:0] $end
$var wire 32 9 out [31:0] $end
$var wire 1 : zero $end
$var wire 1 ; negative $end
$var wire 32 < inA [31:0] $end
$upscope $end
$scope module cycle_tri $end
$var wire 1 + control $end
$var wire 32 = o [31:0] $end
$var wire 32 > d [31:0] $end
$upscope $end
$scope module cycounter $end
$var wire 1 ' clk $end
$var wire 32 ? d [31:0] $end
$var wire 1 @ enable $end
$var wire 1 ) reset $end
$var reg 32 A q [31:0] $end
$upscope $end
$scope module intercy $end
$var wire 1 ' clk $end
$var wire 32 B d [31:0] $end
$var wire 1 , enable $end
$var wire 1 ) reset $end
$var reg 32 C q [31:0] $end
$upscope $end
$scope module interline $end
$var wire 1 ' clk $end
$var wire 1 D d $end
$var wire 1 0 enable $end
$var wire 1 / reset $end
$var reg 1 " q $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1D
bx C
b0 B
bx A
1@
bx ?
bx >
bz =
bx <
x;
x:
bx 9
b1 8
b0 7
06
05
bz 4
bx 3
bx 2
bx 1
x0
1/
b0 .
b0 -
0,
0+
0*
1)
b0 (
0'
b0 &
0%
0$
0#
x"
bz !
$end
#5
0;
0:
b1 3
b1 9
b1 ?
00
b0 2
b0 <
b0 >
b0 A
b11111111111111111111111111111111 1
b11111111111111111111111111111111 C
1"
1'
#10
b0 !
b0 4
b0 =
1#
1+
0/
0'
1$
16
b11111111111111110000000000011100 &
b11111111111111110000000000011100 -
0)
#15
b10 3
b10 9
b10 ?
b1 !
b1 4
b1 =
b1 2
b1 <
b1 >
b1 A
1'
#20
0'
#25
b11 3
b11 9
b11 ?
b10 !
b10 4
b10 =
b10 2
b10 <
b10 >
b10 A
1'
#30
0'
#35
b100 3
b100 9
b100 ?
b11 !
b11 4
b11 =
b11 2
b11 <
b11 >
b11 A
1'
#40
0'
#45
b101 3
b101 9
b101 ?
b100 !
b100 4
b100 =
b100 2
b100 <
b100 >
b100 A
1'
#50
bz !
bz 4
bz =
1,
0+
0'
1%
0$
b110 (
b110 .
b110 B
#55
b110 3
b110 9
b110 ?
b110 1
b110 C
b101 2
b101 <
b101 >
b101 A
1'
#60
b101 !
b101 4
b101 =
0,
1+
0'
0%
1$
#65
b111 3
b111 9
b111 ?
b110 !
b110 4
b110 =
10
b110 2
b110 <
b110 >
b110 A
1'
#70
0'
#75
b1000 3
b1000 9
b1000 ?
b111 !
b111 4
b111 =
00
b111 2
b111 <
b111 >
b111 A
1'
#80
0'
#85
b1001 3
b1001 9
b1001 ?
b1000 !
b1000 4
b1000 =
b1000 2
b1000 <
b1000 >
b1000 A
1'
#90
0'
#95
b1010 3
b1010 9
b1010 ?
b1001 !
b1001 4
b1001 =
b1001 2
b1001 <
b1001 >
b1001 A
1'
#100
bz !
bz 4
bz =
1/
0+
1*
0'
1%
0$
06
15
b11111111111111110000000001101100 &
b11111111111111110000000001101100 -
#105
b1011 3
b1011 9
b1011 ?
b1010 2
b1010 <
b1010 >
b1010 A
1'
#110
0'
